// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/liza/labwork_45/internal/model"

	uuid "github.com/google/uuid"
)

// CourierServiceInterface is an autogenerated mock type for the CourierServiceInterface type
type CourierServiceInterface struct {
	mock.Mock
}

// AssignCourierToDelivery provides a mock function with given fields: _a0, _a1, _a2
func (_m *CourierServiceInterface) AssignCourierToDelivery(_a0 context.Context, _a1 uuid.UUID, _a2 uuid.UUID) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for AssignCourierToDelivery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDelivery provides a mock function with given fields: _a0, _a1
func (_m *CourierServiceInterface) CreateDelivery(_a0 context.Context, _a1 *model.Delivery) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateDelivery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Delivery) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllDeliveries provides a mock function with given fields: _a0
func (_m *CourierServiceInterface) GetAllDeliveries(_a0 context.Context) ([]*model.DeliveryGet, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllDeliveries")
	}

	var r0 []*model.DeliveryGet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.DeliveryGet, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.DeliveryGet); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.DeliveryGet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCourier provides a mock function with given fields: _a0, _a1, _a2
func (_m *CourierServiceInterface) UpdateCourier(_a0 context.Context, _a1 uuid.UUID, _a2 *model.Courier) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCourier")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.Courier) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeliveryStatus provides a mock function with given fields: _a0, _a1
func (_m *CourierServiceInterface) UpdateDeliveryStatus(_a0 context.Context, _a1 *model.DeliveryStatus) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeliveryStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.DeliveryStatus) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCourierServiceInterface creates a new instance of CourierServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCourierServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CourierServiceInterface {
	mock := &CourierServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
