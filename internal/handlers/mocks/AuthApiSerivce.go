// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/liza/labwork_45/internal/model"

	uuid "github.com/google/uuid"
)

// AuthApiSerivce is an autogenerated mock type for the AuthApiSerivce type
type AuthApiSerivce struct {
	mock.Mock
}

// DeleteUserByID provides a mock function with given fields: ctx, ID
func (_m *AuthApiSerivce) DeleteUserByID(ctx context.Context, ID uuid.UUID) error {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *AuthApiSerivce) GetAll(ctx context.Context) ([]*model.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPersonalInfo provides a mock function with given fields: ctx, ID
func (_m *AuthApiSerivce) GetPersonalInfo(ctx context.Context, ID uuid.UUID) (*model.User, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonalInfo")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.User, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.User); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: ctx, login
func (_m *AuthApiSerivce) LoginUser(ctx context.Context, login *model.Login) (string, string, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Login) (string, string, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Login) string); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Login) string); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.Login) error); ok {
		r2 = rf(ctx, login)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SignUpUser provides a mock function with given fields: ctx, user
func (_m *AuthApiSerivce) SignUpUser(ctx context.Context, user *model.SignUp) (uuid.UUID, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SignUpUser")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.SignUp) (uuid.UUID, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.SignUp) uuid.UUID); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.SignUp) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthApiSerivce creates a new instance of AuthApiSerivce. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthApiSerivce(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthApiSerivce {
	mock := &AuthApiSerivce{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
